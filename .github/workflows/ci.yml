name: 🔍 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'

jobs:
  # Code Quality and Linting
  quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📥 Install dependencies
        run: |
          # Try frozen lockfile first, fallback to regular install if it fails
          pnpm install --frozen-lockfile || {
            echo "⚠️ Frozen lockfile failed, attempting regular install..."
            pnpm install --no-frozen-lockfile
          }
        
      - name: 🔍 Lint HTML files
        run: |
          # Install htmlhint globally for HTML linting
          npm install -g htmlhint
          # Lint HTML files with comprehensive rules
          htmlhint --config .htmlhintrc *.html || echo "HTML linting completed with warnings"
          
      - name: 🎨 Lint CSS files
        run: |
          # Install stylelint for CSS linting
          npm install -g stylelint stylelint-config-standard
          # Lint CSS files
          stylelint "assets/style/**/*.css" --config-basedir . || echo "CSS linting completed with warnings"
          
      - name: 🟨 Lint JavaScript files
        run: |
          # Install ESLint for JavaScript linting
          npm install -g eslint
          # Lint JavaScript files
          eslint assets/js/*.js --no-eslintrc --env browser,es2022 --parserOptions ecmaVersion:2022 || echo "JS linting completed with warnings"

  # Build and Test
  build:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📥 Install dependencies
        run: |
          # Try frozen lockfile first, fallback to regular install if it fails
          pnpm install --frozen-lockfile || {
            echo "⚠️ Frozen lockfile failed, attempting regular install..."
            pnpm install --no-frozen-lockfile
          }
        
      - name: 🏗️ Build project
        run: pnpm run build
        
      - name: ✅ Verify build output
        run: |
          echo "Checking build output..."
          ls -la dist/
          # Verify critical files exist
          test -f dist/index.html || exit 1
          test -f dist/assets/style/styles.css || exit 1
          test -f dist/assets/js/script.js || exit 1
          test -f dist/site.webmanifest || exit 1
          echo "✅ All critical files present"
          
      - name: 📊 Check file sizes
        run: |
          echo "📊 Build output file sizes:"
          find dist -type f -exec ls -lh {} \; | awk '{print $5 "\t" $9}' | sort -hr
          
          # Check if CSS is under reasonable size (warn if over 100KB)
          css_size=$(stat -f%z dist/assets/style/styles.css 2>/dev/null || stat -c%s dist/assets/style/styles.css)
          if [ $css_size -gt 102400 ]; then
            echo "⚠️ Warning: CSS file is large ($css_size bytes)"
          else
            echo "✅ CSS file size is optimal ($css_size bytes)"
          fi
          
          # Check if JS is under reasonable size (warn if over 50KB)
          js_size=$(stat -f%z dist/assets/js/script.js 2>/dev/null || stat -c%s dist/assets/js/script.js)
          if [ $js_size -gt 51200 ]; then
            echo "⚠️ Warning: JavaScript file is large ($js_size bytes)"
          else
            echo "✅ JavaScript file size is optimal ($js_size bytes)"
          fi
          
      - name: 🗜️ Test compression
        run: |
          # Test gzip compression ratios
          echo "🗜️ Testing compression ratios:"
          for file in dist/assets/style/styles.css dist/assets/js/script.js dist/index.html; do
            if [ -f "$file" ]; then
              original_size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file")
              gzip_size=$(gzip -c "$file" | wc -c)
              ratio=$(echo "scale=1; ($original_size - $gzip_size) * 100 / $original_size" | bc -l 2>/dev/null || echo "N/A")
              echo "$file: $original_size → $gzip_size bytes (${ratio}% reduction)"
            fi
          done
          
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 7

  # Security and Performance Audit
  audit:
    name: 🔒 Security & Performance Audit
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📥 Install dependencies
        run: |
          # Try frozen lockfile first, fallback to regular install if it fails
          pnpm install --frozen-lockfile || {
            echo "⚠️ Frozen lockfile failed, attempting regular install..."
            pnpm install --no-frozen-lockfile
          }
        
      - name: 🔒 Security audit
        run: |
          echo "🔒 Running security audit..."
          pnpm audit --audit-level moderate || echo "Security audit completed with warnings"
          
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/
          
      - name: 🚀 Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: 🏃 Run Lighthouse CI
        run: |
          # Start a simple HTTP server for testing
          npx http-server dist -p 8080 -s &
          sleep 5
          
          # Run Lighthouse audit
          lhci autorun --upload.target=temporary-public-storage --collect.url=http://localhost:8080 || echo "Lighthouse audit completed"
          
      - name: 🔍 Validate HTML
        run: |
          # Install html-validate for comprehensive HTML validation
          npm install -g html-validate
          html-validate dist/index.html --config .htmlvalidaterc.json || echo "HTML validation completed with warnings"

  # Accessibility Testing
  accessibility:
    name: ♿ Accessibility Testing
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🔧 Install accessibility tools
        run: |
          npm install -g axe-core pa11y
          
      - name: ♿ Run accessibility tests
        run: |
          # Start HTTP server
          npx http-server dist -p 8081 -s &
          sleep 5
          
          # Run Pa11y accessibility tests
          echo "🔍 Running Pa11y accessibility tests..."
          pa11y http://localhost:8081 --standard WCAG2AA --reporter cli || echo "Accessibility tests completed with warnings"
          
          # Test with different viewport sizes
          echo "📱 Testing mobile accessibility..."
          pa11y http://localhost:8081 --standard WCAG2AA --viewport 375x667 --reporter cli || echo "Mobile accessibility tests completed"

  # Static Analysis & Validation
  validation:
    name: 🔍 Static Analysis
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/
          
      - name: � Validate HTML structure
        run: |
          echo "🔍 Validating HTML structure..."
          
          # Check if index.html exists and has basic structure
          if [ -f "dist/index.html" ]; then
            echo "✅ index.html exists"
            
            # Check for essential HTML elements
            if grep -q "<!DOCTYPE html>" dist/index.html; then
              echo "✅ DOCTYPE declaration found"
            else
              echo "⚠️ DOCTYPE declaration missing"
            fi
            
            if grep -q "<html" dist/index.html; then
              echo "✅ HTML element found"
            else
              echo "❌ HTML element missing"
              exit 1
            fi
            
            if grep -q "<head>" dist/index.html; then
              echo "✅ HEAD element found"
            else
              echo "❌ HEAD element missing"
              exit 1
            fi
            
            if grep -q "<body>" dist/index.html; then
              echo "✅ BODY element found"
            else
              echo "❌ BODY element missing"
              exit 1
            fi
            
            if grep -q "<title>" dist/index.html; then
              echo "✅ TITLE element found"
            else
              echo "⚠️ TITLE element missing"
            fi
            
          else
            echo "❌ index.html not found"
            exit 1
          fi
          
      - name: 📱 Check responsive design elements
        run: |
          echo "📱 Checking responsive design elements..."
          
          # Check for viewport meta tag
          if grep -q 'name="viewport"' dist/index.html; then
            echo "✅ Viewport meta tag found"
          else
            echo "⚠️ Viewport meta tag missing - important for mobile responsiveness"
          fi
          
          # Check for CSS media queries in CSS files
          if find dist -name "*.css" -exec grep -l "@media" {} \; | head -1; then
            echo "✅ Media queries found in CSS"
          else
            echo "⚠️ No media queries found - consider adding for better responsiveness"
          fi
          
      - name: 🔒 Security check
        run: |
          echo "🔒 Performing basic security checks..."
          
          # Check for inline scripts (potential XSS risk)
          if grep -q "javascript:" dist/index.html; then
            echo "⚠️ JavaScript URLs found - review for security"
          else
            echo "✅ No JavaScript URLs found"
          fi
          
          # Check for external resource loading
          if grep -q "http://" dist/index.html; then
            echo "⚠️ HTTP resources found - consider using HTTPS"
          else
            echo "✅ No insecure HTTP resources found"
          fi