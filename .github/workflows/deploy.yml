name: 🚀 Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'

jobs:
  # Pre-deployment checks
  pre-deploy:
    name: 🔍 Pre-deployment Checks
    runs-on: ubuntu-latest
    
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      commit-message: ${{ steps.commit.outputs.message }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: 📝 Get commit message
        id: commit
        run: |
          # Get commit message and properly escape it for GitHub Actions
          message=$(git log -1 --pretty=%B)
          
          # Use heredoc format for multiline output to avoid parsing issues
          {
            echo "message<<EOF"
            echo "$message"
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          # Display first line for logging (truncated if too long)
          first_line=$(echo "$message" | head -n1)
          if [ ${#first_line} -gt 100 ]; then
            echo "Commit message: ${first_line:0:100}..."
          else
            echo "Commit message: $first_line"
          fi
          
      - name: 🔍 Check deployment conditions
        id: check
        run: |
          commit_message="${{ steps.commit.outputs.message }}"
          
          # Skip deployment if commit message contains [skip deploy]
          if [[ "$commit_message" == *"[skip deploy]"* ]]; then
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "⏭️ Deployment skipped due to [skip deploy] in commit message"
          else
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Deployment conditions met"
          fi

  # Build for production
  build:
    name: 🏗️ Production Build
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 📥 Install dependencies
        run: |
          # Try frozen lockfile first, fallback to regular install if it fails
          pnpm install --frozen-lockfile || {
            echo "⚠️ Frozen lockfile failed, attempting regular install..."
            pnpm install --no-frozen-lockfile
          }
        
      - name: 🧹 Clean previous builds
        run: rm -rf dist
        
      - name: 🏗️ Build for production
        run: pnpm run build
        env:
          NODE_ENV: production
          
      - name: 🔍 Verify production build
        run: |
          echo "🔍 Verifying production build..."
          
          # Check required files exist
          required_files=(
            "dist/index.html"
            "dist/assets/style/styles.css"
            "dist/assets/js/script.js"
            "dist/site.webmanifest"
            "dist/robots.txt"
            "dist/sitemap.xml"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done
          
          # Check file sizes
          echo "📊 Production build sizes:"
          find dist -type f -name "*.html" -o -name "*.css" -o -name "*.js" | while read file; do
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file")
            echo "  $(basename "$file"): ${size} bytes"
          done
          
      - name: 🗜️ Optimize assets
        run: |
          # Additional optimization for production
          echo "🗜️ Running additional optimizations..."
          
          # Optimize images if imagemin is available
          if command -v imagemin &> /dev/null; then
            find dist -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | xargs imagemin --out-dir=dist/assets/img/
          fi
          
          # Generate integrity hashes for critical assets
          echo "🔐 Generating integrity hashes..."
          for file in dist/assets/style/styles.css dist/assets/js/script.js; do
            if [ -f "$file" ]; then
              hash=$(openssl dgst -sha384 -binary "$file" | openssl base64 -A)
              echo "Integrity hash for $file: sha384-$hash"
            fi
          done
          
      - name: 📤 Upload production build
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 30

  # Deploy to Netlify
  deploy:
    name: 🌍 Deploy to Netlify
    runs-on: ubuntu-latest
    needs: [pre-deploy, build]
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download production build
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist/
          
      - name: 🌍 Deploy to Netlify
        id: deploy
        uses: netlify/actions/cli@master
        with:
          args: deploy --prod --dir=dist --message="Deploy from GitHub Actions - ${{ needs.pre-deploy.outputs.commit-message }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          
      - name: 📝 Get deployment URL
        run: |
          echo "🌍 Deployment successful!"
          echo "URL: ${{ steps.deploy.outputs.url }}"
          
      - name: 🔗 Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🚀 Deployment Preview')
            );
            
            const commentBody = `🚀 **Deployment Preview**
            
            ✅ Deploy successful! Preview your changes:
            🔗 **Preview URL**: ${{ steps.deploy.outputs.url }}
            
            📊 **Build Info**:
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.head_ref }}
            - Workflow: ${{ github.run_id }}
            
            ---
            *This comment will be updated for each new deployment.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  # Post-deployment verification
  verify:
    name: ✅ Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy]
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    
    steps:
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🔧 Install verification tools
        run: |
          npm install -g lighthouse @lhci/cli puppeteer
          
      - name: 🌐 Wait for deployment to be ready
        run: |
          echo "⏳ Waiting for deployment to be ready..."
          sleep 30
          
      - name: 🔍 Verify deployment
        run: |
          # Get the site URL (you'll need to set this as a secret or environment variable)
          SITE_URL="${{ secrets.SITE_URL || 'https://yohann-hommet.netlify.app' }}"
          
          echo "🔍 Verifying deployment at: $SITE_URL"
          
          # Test if site is accessible
          response=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL")
          if [ "$response" = "200" ]; then
            echo "✅ Site is accessible (HTTP $response)"
          else
            echo "❌ Site returned HTTP $response"
            exit 1
          fi
          
          # Test critical pages
          critical_paths=("/" "/offline.html")
          for path in "${critical_paths[@]}"; do
            url="$SITE_URL$path"
            response=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            if [ "$response" = "200" ]; then
              echo "✅ $url is accessible"
            else
              echo "⚠️ $url returned HTTP $response"
            fi
          done
          
      - name: 🚀 Quick Lighthouse audit
        run: |
          SITE_URL="${{ secrets.SITE_URL || 'https://yohann-hommet.netlify.app' }}"
          
          echo "🚀 Running quick Lighthouse audit..."
          lhci autorun \
            --collect.url="$SITE_URL" \
            --collect.numberOfRuns=1 \
            --assert.preset=lighthouse:no-pwa \
            --upload.target=temporary-public-storage || echo "Lighthouse audit completed with warnings"
            
      - name: 🔒 Security headers check
        run: |
          SITE_URL="${{ secrets.SITE_URL || 'https://yohann-hommet.netlify.app' }}"
          
          echo "🔒 Checking security headers..."
          
          # Check for important security headers
          headers_to_check=(
            "Content-Security-Policy"
            "X-Content-Type-Options"
            "X-Frame-Options"
            "X-XSS-Protection"
            "Referrer-Policy"
          )
          
          for header in "${headers_to_check[@]}"; do
            if curl -s -I "$SITE_URL" | grep -i "$header" > /dev/null; then
              echo "✅ $header header is present"
            else
              echo "⚠️ $header header is missing"
            fi
          done
          
      - name: 📊 Performance check
        run: |
          SITE_URL="${{ secrets.SITE_URL || 'https://yohann-hommet.netlify.app' }}"
          
          echo "📊 Running performance checks..."
          
          # Measure page load time
          load_time=$(curl -o /dev/null -s -w "%{time_total}" "$SITE_URL")
          echo "⏱️ Page load time: ${load_time}s"
          
          # Check if load time is reasonable (under 3 seconds)
          if (( $(echo "$load_time < 3.0" | bc -l) )); then
            echo "✅ Page load time is acceptable"
          else
            echo "⚠️ Page load time is slow (>${load_time}s)"
          fi

  # Notify deployment status
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy, verify]
    if: always() && needs.pre-deploy.outputs.should-deploy == 'true'
    
    steps:
      - name: 📢 Deployment Success Notification
        if: needs.deploy.result == 'success' && needs.verify.result == 'success'
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "✅ Build: Success"
          echo "✅ Deploy: Success" 
          echo "✅ Verification: Success"
          
      - name: 📢 Deployment Failure Notification
        if: needs.deploy.result == 'failure' || needs.verify.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Build: ${{ needs.build.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
          echo "Verify: ${{ needs.verify.result }}"
          exit 1